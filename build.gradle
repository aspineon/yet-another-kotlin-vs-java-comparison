buildscript {
    ext {
        kotlinVersion = '1.2.+'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://raw.github.com/java-decompiler/mvn-repo/master'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.clojars.razum2um:jd-core-java:1.2")
        classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.7.1'
    }
}


apply plugin: 'kotlin'
apply plugin: "com.github.sherter.google-java-format"

group = 'se.bjurr.kotlinvsjava'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
sourceSets {
    main.java.srcDirs = []
}
compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-java-parameters"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-java-parameters"]
        jvmTarget = "1.8"
    }
}
repositories {
    mavenCentral()
    jcenter()
}
configurations {
    ktlint
}
dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")
    ktlint "com.github.shyiko:ktlint:+"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt", "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
}
ktlint.dependsOn ktlintFormat
check.dependsOn ktlint

class DecompileTask extends DefaultTask {
    File decompileJar
    File decompiledPath

    @TaskAction
    def decompiling() {
        decompiledPath.deleteDir()
        println "From jar: " + decompileJar
        new jd.core.Decompiler().decompile(decompileJar.getAbsolutePath(), decompiledPath.getAbsolutePath())
    }
}

task decompile(type: DecompileTask) {
    decompileJar = file(project.getBuildDir().getAbsolutePath() + "/libs/yet-another-kotlin-vs-java-comparison-0.0.1-SNAPSHOT.jar")
    decompiledPath = file(project.getBuildDir().getAbsolutePath() + "/../src/main/java")
}
decompile.dependsOn build

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

task format(type: GoogleJavaFormat) {
    source 'src/main/java'
    include '**/*.java'
}
format.dependsOn decompile

class GenerateComparisonTask extends DefaultTask {

    def getAllExampleDirs(String folder) {
        Map<String, File> found = new TreeMap<String, String>()
        File rootDir = new File(project.getRootDir().getAbsolutePath() + folder)
        rootDir.eachDirRecurse() { dir ->
            if (dir.getName().endsWith("p1")) {
                File parentFile = new File(dir.getParent())
                String parent = parentFile.getName()
                String parentParent = new File(parentFile.getParent()).getName()
                found.put(parentParent + "/" + parent + "/p1", dir)
            }
        }
        found
    }

    def generateDoc(String exampleNamePretty, File exampleDir, File resultDir) {
        println "${exampleNamePretty}"
        Map<String, String> exampleInputs = exampleDir
                .listFiles()
                .collectEntries({ [(it.getName()), it.getText("UTF-8")] })
        Map<String, String> exampleOutputs = resultDir
                .listFiles()
                .collectEntries({ [(it.getName()), it.getText("UTF-8")] })

        String doc = """
# ${exampleNamePretty}
""".stripMargin()


        doc += """
## Kotlin
"""
        exampleInputs.each { fileName, fileContent ->
            doc += """
**${fileName}**

```
${fileContent}
```
""".stripMargin()
        }

        doc += """
## Java
"""
        exampleOutputs.each { fileName, fileContent ->
            doc += """
**${fileName}**

```
${fileContent}
```
""".stripMargin()


        }
        println(doc)

        File docFile = new File(project.getRootDir().getAbsolutePath() + "/doc/" + exampleNamePretty.replaceAll(" ", "_") + ".md")
        docFile.createNewFile()
        docFile.write(doc)
        return docFile
    }


    @TaskAction
    void doAction() {
        Map<String, File> exampleDirs = getAllExampleDirs("/src/main/kotlin")
        Map<String, File> exampleDirResults = getAllExampleDirs("/src/main/java")
        Map<String, File> examples = new TreeMap<String, File>()
        exampleDirs.each { exampleName, exampleDir ->
            File resultDir = exampleDirResults[exampleName]
            String exampleNamePretty = exampleName.replaceAll("sspace", " ")
            File generated = generateDoc(exampleNamePretty, exampleDir, resultDir)
            String generatedRelative = generated.getAbsolutePath().replaceAll(project.getRootDir().getAbsolutePath(), "")
            examples.put(exampleNamePretty, generatedRelative)
        }

        String readmeMd = """
# Yet Another Kotlin VS Java Comparison

This one shows complete examples where the Kotlin code is compled to bytecode and decompiled to Java. Enabling a person familiar with Java to very quickly understand Kotlin.

## Examples
"""
        examples.each { fileName, filePath ->
            readmeMd += """
* [${fileName}](https://github.com/tomasbjerre/yet-another-kotlin-vs-java-comparison/blob/master${filePath})
""".stripMargin()
        }
        File mainDocFile = new File(project.getRootDir().getAbsolutePath() + "/README.md")
        mainDocFile.createNewFile()
        mainDocFile.write(readmeMd)
    }

}

task generateComparison(type: GenerateComparisonTask)
generateComparison.dependsOn format